// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SwimCheck.API.Data;

#nullable disable

namespace SwimCheck.API.Migrations
{
    [DbContext(typeof(SwimCheckDbContext))]
    partial class SwimCheckDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SwimCheck.API.Models.Domain.Athlete", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Club")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("Athletes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1a12fe5-c033-44e1-abfc-2dc9dcf7579f"),
                            BirthDate = new DateTime(1998, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Club = "Lousada XXI",
                            Name = "Eduardo Duarte"
                        },
                        new
                        {
                            Id = new Guid("e44359e5-41d3-4ac2-a346-235f8e822ff2"),
                            BirthDate = new DateTime(1998, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Club = "FC Porto",
                            Name = "Michael Phelps"
                        },
                        new
                        {
                            Id = new Guid("e6f2bac7-19ef-4085-8857-439eb1ffec5b"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(5),
                            Club = "SL Benfica",
                            Name = "Caeleb Dressel"
                        });
                });

            modelBuilder.Entity("SwimCheck.API.Models.Domain.Enroll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AthleteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EnrollDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.HasIndex("AthleteId", "RaceId")
                        .IsUnique();

                    b.ToTable("Enrolls");
                });

            modelBuilder.Entity("SwimCheck.API.Models.Domain.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DistanceMeters")
                        .HasColumnType("int");

                    b.Property<string>("Stroke")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed9dca4b-4dbf-4379-96fa-f077e1a9af2a"),
                            DistanceMeters = 100,
                            Stroke = "Backstroke"
                        },
                        new
                        {
                            Id = new Guid("0b2e4c57-00e2-4592-b2f5-ecc3098eba8c"),
                            DistanceMeters = 200,
                            Stroke = "Medley"
                        },
                        new
                        {
                            Id = new Guid("5088c3f6-1058-449d-9fe5-70815af42061"),
                            DistanceMeters = 400,
                            Stroke = "Freestyle"
                        },
                        new
                        {
                            Id = new Guid("073d53ee-5b7c-43ad-9cc8-879e15790bbd"),
                            DistanceMeters = 50,
                            Stroke = "Breaststroke"
                        });
                });

            modelBuilder.Entity("SwimCheck.API.Models.Domain.Enroll", b =>
                {
                    b.HasOne("SwimCheck.API.Models.Domain.Athlete", "Athlete")
                        .WithMany("Enrolls")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwimCheck.API.Models.Domain.Race", "Race")
                        .WithMany("Enrolls")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("SwimCheck.API.Models.Domain.Athlete", b =>
                {
                    b.Navigation("Enrolls");
                });

            modelBuilder.Entity("SwimCheck.API.Models.Domain.Race", b =>
                {
                    b.Navigation("Enrolls");
                });
#pragma warning restore 612, 618
        }
    }
}
